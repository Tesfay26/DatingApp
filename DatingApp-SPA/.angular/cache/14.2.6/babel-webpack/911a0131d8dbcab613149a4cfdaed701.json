{"ast":null,"code":"import { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(errors => {\n        if (errors instanceof HttpErrorResponse) {\n          if (errors.status === 401) {\n            return throwError(errors.statusText);\n          }\n\n          const applicationError = errors.headers.get(\"Application-Error\");\n\n          if (applicationError) {\n            console.log(applicationError);\n            return throwError(applicationError);\n          }\n\n          const serverError = errors.error;\n          let modelStateErrors = '';\n\n          if (serverError && typeof serverError === 'object') {\n            for (const key in serverError) {\n              if (serverError[key]) {\n                modelStateErrors += serverError[key] + '\\n';\n              }\n            }\n          }\n\n          throwError(modelStateErrors || serverError || \"Server Error\");\n        }\n\n        return throwError(\"\");\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)();\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();\nexport const ErrorInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: ErrorInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}